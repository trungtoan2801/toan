#include <iostream>
using namespace std;
struct Point
{
	int hang,cot;
};
int N;
int map[105][105];
int visit[105][105];
int MT_thaydoi[105][105];
int dx[4] = {0,-1,0,1};
int dy[4] = {-1,0,1,0};
Point queue[1000000];
Point queue1[1000000];
struct Queue
{
	int rear, front;
	Queue()
	{
		rear = front= 0;
	}
	void push(Point a)
	{
		queue[rear] = a;
		rear++;
	}
	Point pop()
	{
		Point a;
		a = queue[front];
		front++;
		return a;
	}
	bool isEmpty()
	{
		if(rear == front) return true;
		return false;
	}
};
struct Queue1
{
	int rear, front;
	Queue1()
	{
		rear = front= 0;
	}
	void push1(Point a)
	{
		queue1[rear] = a;
		rear++;
	}
	Point pop1()
	{
		Point a;
		a = queue1[front];
		front++;
		return a;
	}
	bool isEmpty1()
	{
		if(rear == front) return true;
		return false;
	}
};
void resetvisit()
{
	for(int i = 0; i<N;i++)
	{
		for(int j = 0; j<N; j++)
		{
			visit[i][j] = 0;
		}
	}
}
void BFS(Point S)
{
	Queue Q = Queue();
	Q.push(S);
	visit[S.hang][S.cot] = 1;
	int demMau[6] = {0};
	int luuvet[2][100005];
	int length = 0;
	while(!Q.isEmpty())
	{
		Point p = Q.pop();
		if(map[p.hang][p.cot] == 0)
		{
			luuvet[0][length] = p.hang;
			luuvet[1][length] = p.cot;
			length++;
		}
		if(map[p.hang][p.cot] == 0)
		{
			for(int i = 0;i<4;i++)
			{
				int h = p.hang + dx[i];
				int c = p.cot + dy[i];
				if(h>=0 && h < N && c>=0 && c<N && visit[h][c] == 0 )
				{
					visit[h][c] = 1;
					demMau[map[h][c]]++;
					Point tp;
					tp.hang = h;
					tp.cot = c;
					Q.push(tp);
				}
			}
		}
		if(map[p.hang][p.cot] != 0)
		{
			for(int i = 0; i<4; i++)
			{
				int h = p.hang + dx[i];
				int c = p.cot + dy[i];
				if(h>=0 && h < N && c>=0 && c<N && visit[h][c] == 0 && map[p.hang][p.cot] == map[h][c])
				{
					visit[h][c] = 1;
					demMau[map[h][c]]++;
					Point tp;
					tp.hang = h;
					tp.cot = c;
					Q.push(tp);
				}
			}
		}
	}
	// tim so lan xuat hien max
	int max = 0;
	int index;
	for(int i = 1; i<6; i++)
	{
		if(demMau[i] >= max)
		{
			max = demMau[i];
			index = i;
		}
	}
	// chuyen vung
	for(int i = 0; i<length; i++)
	{
		MT_thaydoi[luuvet[0][i]][luuvet[1][i]] = index;
	}
}
void demvung(int hang,int cot)
{
	Queue1 Q1 = Queue1();
	Point S;
	S.hang = hang;
	S.cot = cot;
	Q1.push1(S);
	visit[S.hang][S.cot] = 1;
	while(!Q1.isEmpty1())
	{
		Point p = Q1.pop1();
		for(int i = 0; i<4; i++)
		{
			int h = p.hang + dx[i];
			int c = p.cot +dy[i];
			if(h>=0 && h < N && c>=0 && c<N && visit[h][c] == 0 && MT_thaydoi[p.hang][p.cot] == MT_thaydoi[h][c])
			{
				visit[h][c] = 1;
				Point tp;
				tp.hang = h;
				tp.cot = c;
				Q1.push1(tp);
			}
		}
	}
}
int main()
{
	freopen("Text.txt","r",stdin);
	int T;
	cin >> T;
	for(int tc = 1; tc<=T;tc++)
	{
		cin >> N;
		for(int i = 0;i<N;i++)
		{
			for(int j = 0; j<N; j++)
			{
				cin >> map[i][j];
				MT_thaydoi[i][j] = map[i][j];
				visit[i][j] = 0;
			}
		}
		for(int i = 0;i<N;i++)
		{
			for(int j = 0; j<N; j++)
			{
				if(map[i][j] == 0)
				{
					Point tp;
					tp.hang = i;
					tp.cot = j;
					BFS(tp);
					resetvisit();
				}
			}
		}
		int cnt = 0;
		for(int i = 0;i<N;i++)
		{
			for(int j = 0; j<N; j++)
			{
				if(visit[i][j] == 0)
				{
			        cnt++;
					demvung(i,j);
				}
			}
		}
		cout << cnt << endl;
	}
	return 0;
}
					
// input
3
5

5 5 1 4 4  

4 0 2 4 2  

5 0 0 2 0

5 4 3 0 1

1 3 3 2 1

7 

0 0 0 0 0 0 0

0 0 0 0 0 0 0

0 0 0 0 0 0 0

5 0 5 0 5 0 5

0 0 0 0 0 0 0

0 0 0 0 0 0 0

0 0 0 0 0 0 0

10

1 3 5 1 4 0 0 4 2 1

1 1 2 1 1 0 5 0 2 1

5 0 2 0 4 4 4 0 1 1

0 2 2 4 0 5 4 2 1 3

1 1 2 2 2 3 3 2 1 1

5 1 1 2 0 3 3 2 2 1

3 1 1 1 0 0 1 2 2 5

3 1 4 1 2 0 4 0 0 5

4 0 3 3 1 3 3 0 0 1

5 0 3 1 4 3 3 1 2 3
