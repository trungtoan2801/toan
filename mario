//Mario
#include <iostream>
using namespace std;
int M,N;
int map[55][55];
int buoc;
struct Point
{
	int hang,cot;
};
Point start,stop;
int dx[4] = {0,-1,0,1};
int dy[4] = {-1,0,1,0};
int ans;
Point queue[100000];
struct Queue
{
	int rear,front;
	Queue()
	{
		rear = front = 0;
	}
	void push(Point a)
	{
		queue[rear] = a;
		rear++;
	}
	Point pop()
	{
		Point a;
		a = queue[front];
		front++;
		return a;
	}
	bool isEmpty()
	{
		if(rear == front) return true;
		else return false;
	}
};
void BFS()
{
	int visit[55][55] = {0};
	Queue Q = Queue();
	Q.push(start);
	visit[start.hang][start.cot] = 1;
	while(!Q.isEmpty())
	{
		Point p = Q.pop();
		for(int i = 0; i<4; i++)
		{
			for(int t = 1; t<=buoc; t++)
			{
				int h = p.hang + dx[i]*t;
				int c = p.cot + dy[i];
				if(h>=1 && h<= M && c>=1 && h <=N && visit[h][c] == 0 && map[h][c] != 0)
				{
					visit[h][c] = 1;
					Point tp;
					tp.hang = h;
					tp.cot = c;
					Q.push(tp);
					if(h == stop.hang && c == stop.cot)
					{
						ans = buoc;
						return;
					}
				}
			}
		}
	}
}
int main()
{
	//freopen("Text.txt","r",stdin);
	int T;
	cin >> T;
	for(int tc=1; tc<=T; tc++)
	{
		cin >> M >> N;
		for(int i = 1; i<= M; i++)
		{
			for(int j = 1; j<=N; j++)
			{
				cin >> map[i][j];
				if(map[i][j] == 2)
				{
					start.hang = i;
					start.cot = j;
				}
				else if(map[i][j] == 3)
				{
					stop.hang = i;
					stop.cot = j;
				}
			}
		}
		ans = -1;
		buoc = 1;
		while(ans == -1)
		{
			BFS();
			buoc++;
		}
		cout << "Case #" << tc << endl << ans << endl;
	}
	return 0;
}

//3
//5 8
//1 1 1 1 0 0 0 0
//0 0 0 3 0 1 1 1
//1 1 1 0 0 1 0 0 
//0 0 0 0 0 0 1 0
//2 1 1 1 1 1 1 1
//5 6
//0 1 1 1 0 0
//3 1 0 1 1 0
//0 0 0 0 1 1
//0 0 0 0 0 1
//2 1 1 1 1 1
//9 13
//0 1 1 1 1 1 1 1 1 1 1 1 1 
//1 1 0 0 0 0 0 0 0 0 0 1 1 
//0 0 0 0 0 0 0 0 0 0 0 0 0 
//0 0 0 0 0 0 0 0 0 0 0 0 0 
//1 1 0 0 0 0 0 0 0 0 0 1 3 
//0 0 0 0 0 0 0 0 0 0 0 0 0 
//1 1 0 0 0 0 0 0 0 0 0 0 0 
//0 0 0 0 0 0 0 0 0 0 0 0 0
//2 1 1 1 1 1 1 1 1 1 1 1 1


Sample output
Case #1
2
Case #2
1
Case #3
3
