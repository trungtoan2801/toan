//*************************************************************************************
//******************** Constant 변수들, 버튼 및 메시지 관련 메소드 *************************
//*************************************************************************************
var BUTTON_DESIGNS = {
	add:'<span class="btn_page"><a href="#"><span class="ico_add"></span>' + msg('sdp.common.label.add') + '</a></span>',
	cancel:'<span class="btn_page"><a href="#"><span class="ico_cancel"></span>' + msg('sdp.common.label.cancel') + '</a></span>',
	close:'<span class="btn_page"><a href="#"><span class="ico_close"></span>' + msg('sdp.common.label.close') + '</a></span>',
	confirm:'<span class="btn_page_rd"><a href="#"><span class="ico_apply"></span>' + msg('sdp.common.label.confirm') + '</a></span>',
	"delete":'<span class="btn_page"><a href="#"><span class="ico_del"></span>' + msg('sdp.common.label.delete') + '</a></span>',
	deleteSpotUser:'<span class="btn_page"><a href="#"><span class="ico_del"></span>' + msg('scs.admin.common.delete.spotUser') + '</a></span>',
	deleteFile:'<span class="btn_list_sm"><a href="#">' + msg('sdp.common.label.delete') + '</a></span>',
	edit:'<span class="btn_page"><a href="#"><span class="ico_edit"></span>' + msg('sdp.common.label.edit') + '</a></span>',
	fileAttachment:'<span class="btn_list_sm"><a href="#">' + msg('sdp.common.label.attachments') + '</a></span>',
	list:'<span class="btn_page"><a href="#"><span class="ico_list"></span>' + msg('sdp.common.label.list') + '</a></span>',
	listAdd:'<span class="btn_list"><a href="#"><span class="ico_add"></span>' + msg('sdp.common.label.add') + '</a></span>',
	listCancel:'<span class="btn_list"><a href="#"><span class="ico_cancel"></span>' + msg('sdp.common.label.cancel') + '</a></span>',
	listClose:'<span class="btn_list"><a href="#"><span class="ico_close"></span>' + msg('sdp.common.label.close') + '</a></span>',
	listConfig:'<span class="btn_list"><a href="#"><span class="ico_config"></span>' + msg('sdp.common.label.config') + '</a></span>',
	listConfirm:'<span class="btn_list"><a href="#"><span class="ico_apply"></span>' + msg('sdp.common.label.confirm') + '</a></span>',
	listDelete:'<span class="btn_list"><a href="#"><span class="ico_del"></span>' + msg('sdp.common.label.delete') + '</a></span>',
	listDownload:'<span class="btn_list"><a href="#"><span class="ico_down"></span>' + msg('sdp.common.label.download') + '</a></span>',
	listEdit:'<span class="btn_list"><a href="#"><span class="ico_edit"></span>' + msg('sdp.common.label.edit') + '</a></span>',
	listExcelDownload:'<span class="btn_list"><a href="#"><span class="ico_xls"></span>' + msg('sdp.common.label.excelDownload') + '</a></span>',
	listExcelUpload:'<span class="btn_list"><a href="#"><span class="ico_xls_up"></span>' + msg('sdp.common.label.excelUpload') + '</a></span>',
	listGuide:'<span class="btn_list"><a href="#"><span class="ico_guide"></span>' + msg('sdp.common.label.guide') + '</a></span>',
	listHelp:'<span class="btn_list"><a href="#"><span class="ico_help"></span>' + msg('sdp.common.label.help') + '</a></span>',
	listList:'<span class="btn_list"><a href="#"><span class="ico_list"></span>' + msg('sdp.common.label.list') + '</a></span>',
	listMail:'<span class="btn_list"><a href="#"><span class="ico_mail"></span>' + msg('common.mail') + '</a></span>',
	listPrint:'<span class="btn_list"><a href="#"><span class="ico_print"></span>' + msg('sdp.common.label.print') + '</a></span>',
	listRegister:'<span class="btn_list"><a href="#"><span class="ico_apply"></span>' + msg('sdp.common.label.register') + '</a></span>',
	listSave:'<span class="btn_list"><a href="#"><span class="ico_save"></span>' + msg('sdp.common.label.save') + '</a></span>',
	listUpload:'<span class="btn_list"><a href="#"><span class="ico_up"></span>' + msg('sdp.common.label.upload') + '</a></span>',
	print:'<span class="btn_page"><a href="#"><span class="ico_print"></span>' + msg('sdp.common.label.print') + '</a></span>',
	register: '<span class="btn_page_rd"><a href="#"><span class="ico_apply"></span>' + msg('sdp.common.label.register') + '</a></span>',
	reset:'<span class="btn_page"><a href="#">' + msg('sdp.common.label.reset') + '</a></span>',
	save:'<span class="btn_page_rd"><a href="#"><span class="ico_save"></span>' + msg('sdp.common.label.save') + '</a></span>',
	search:'<span class="btn_srch"><a href="#">Search</a></span>'
};

function msg(key, doNotUseKeyIfNotFound) {
	var defaultValue = typeof doNotUseKeyIfNotFound == "boolean" ? null : doNotUseKeyIfNotFound;
	if (typeof _messages === "undefined") return defaultValue==null?key:defaultValue;
	if (key == null) return _messages;
	var out = _messages[key];
	if (out == null && doNotUseKeyIfNotFound != true) {
		return defaultValue==null?key:defaultValue;
	}
	return out;
}


Number.prototype.format = function() {
	 if(this == 0) return 0;
	 var reg = /(^[+-]?\d+)(\d{3})/;
	 var n = (this + '');

	 while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');

	 return n;
};

$(function () {
	init();

	$('.authorization').each(processAuthorization);

	$("button[class]").each(processButtons);

	$("span.deleteFileAttachment a").click(function () {
		var attachedFileNode = $($(this).parents("table")[0]).find(".fileAttachmentSelector[checked]").parent();
		var fileAttachments = attachedFileNode.parents(".fileAttachments");

		attachedFileNode.remove();

		function _onFileRemove() {
			var onFileRemove = fileAttachments.attr("onfileremove");
			if (onFileRemove != null) {
				eval(onFileRemove);
			}
		}
		_onFileRemove.call(fileAttachments[0]);
	});

	$("input.toggleAttachmentCheckbox").click(function () {
		$($(this).parents("table")[0]).find(".fileAttachmentSelector").attr("checked", this.checked);
	});

	$("form").each(function () {
		var onsubmit = this.onsubmit;
		this.onsubmit = submitHandler;
		this.autocomplete = "off";
		if (typeof onsubmit == "function") {
			$(this).submit(function () {
				var result = onsubmit.call(this);
				if (result === false) {
					window.event.cancelBubble = true;
				}

				return result;
			});
		}
	});

//	$.datepicker.regional['ko'] = {
//			closeText : '닫기',
//			prevText : '이전달',
//			nextText : '다음달',
//			currentText : '오늘',
//			monthNames : [ '1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월',
//					'10월', '11월', '12월' ],
//			monthNamesShort : [ '1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월',
//					'9월', '10월', '11월', '12월' ],
//			dayNames : [ '일', '월', '화', '수', '목', '금', '토' ],
//			dayNamesShort : [ '일', '월', '화', '수', '목', '금', '토' ],
//			dayNamesMin : [ '일', '월', '화', '수', '목', '금', '토' ],
//			weekHeader : 'Wk',
//			dateFormat : 'yy-mm-dd',
//			firstDay : 0,
//			isRTL : false,
//			showMonthAfterYear : false,
//			yearSuffix : '년'
//		};
//		$.datepicker.setDefaults($.datepicker.regional['ko']);
});
function submitHandler(){
	var form = this;

	form.action = openPageUrl(form.action);

	var hiddenHTMLEditors = $("input.htmlEditorHidden");
	for (var i = 0; i < hiddenHTMLEditors.length; i++) {
		var obj = hiddenHTMLEditors[i];
		obj.value = $(obj).next().attr("MimeValue");
	}
}
function init(){
	var now = new Date();
	$("input.calendar:not([readOnly]):not(:disabled)")
	.addClass("date")
	.addClass("text_calendar")
	.each(function () {
		var startOffsetYear = this.startOffsetYear == null ? -10 : parseInt(this.startOffsetYear);
		var endOffsetYear = this.endOffsetYear == null ? 3 : parseInt(this.endOffsetYear);
		$(this).datepicker({duration:"fast",dateFormat:"yy-mm-dd", yearRange: (now.getYear()+startOffsetYear) + ':' + (now.getYear()+endOffsetYear), changeYear:true})
		if (this.value.length > 0 && this.value.indexOf('-')==-1 && this.value.indexOf('/')==-1 && this.value.indexOf('.')==-1) {
			var dateValue = parseFloat(this.value);
			this.value = dateFormat(dateValue, "yyyy-MM-dd");
		}
		$(this).change(function(){
			if(!_dateValidation(this.value)){
				alert(msg('sdp.common.message.dateValid'));
				this.value="";
			}
		});
	})
	.after('<img src="'+contextPath+'/images/common/ico_date.png" onClick="$(this).prev().datepicker(\'show\')" alt="date">');

	$("div.fileAttachments").each(function () {
		var uploadPath = this.uploadPath == null ? "/common/fileupload.do" : this.uploadPath;
		var readOnly = this.readOnly === true || this.readOnly == "true";
		var thisObj = $(this);
		var attachmentsClearInput = "";
		if (!readOnly) {
			var fieldName = this.fieldName == null ? "attachments" : this.fieldName;
//			if(!thisObj.parents("FORM")[0] || thisObj.parents("FORM")[0][fieldName] == null) {
//			attachmentsClearInput = "<input type='hidden' name='" + fieldName + "' value='_clear()'/>"
//			}
		}

		thisObj.html(attachmentsClearInput +
				(readOnly?"":"<form action='" + contextPath + uploadPath + "' enctype='multipart/form-data' method='post' class='fileupload' style='float:left;width:100%' noTemplate='true'> "+
						"<div class='attach_check'><label><input type='checkbox' class='toggleAttachmentCheckbox'/></label> " +
						(this.downloadType == null ? "" : ("<input type='hidden' name='downloadType' value='" + this.downloadType + "'>")) +
						"<input type='hidden' name='returnType' value='text/html'/>" +
						"<input class='hiddenFile fileBtn' type='file' name='anyFile' value='Upload' " +
						"  onchange='if (_attachmentCheck(this)==false) return false; AIM.submit(this.form, {onComplete: _completeAttachmentCallback});this.form.submit();' style='cursor:hand;'>" +
						"<div class='fakefile'><span class='btn_list_sm'><a href='#'>" + msg('sdp.common.label.attachments') + "</a></span>&nbsp;<span class='btn_list_sm'><a href='#'>" + msg('sdp.common.label.delete') + "</a></span></div>" +
						"" +
						"</div>"+
				"</form>") +
				"<div id='commonFileTable"+this.downloadType+"' class='attach_file'><ul>" +this.innerHTML+"</ul></div>");
	});
	_attachedFile();

	$("INPUT[type=text],TEXTAREA").each(processTextFields);

}

function _dateValidation(value) {
	var check = false;
	var re = /^\d{1,4}-\d{1,2}-\d{2}$/;
	if( re.test(value)){
		var adata = value.split('-');
		var gg = parseInt(adata[2],10);
		var mm = parseInt(adata[1],10);
		var aaaa = parseInt(adata[0],10);
		var xdata = new Date(aaaa,mm-1,gg);
		if ( ( xdata.getFullYear() == aaaa ) && ( xdata.getMonth () == mm - 1 ) && ( xdata.getDate() == gg ) )
			check = true;
		else
			check = false;
	} else
		check = false;
	return check;
}

function processTextFields() {
	var thisObj = $(this);
	var newClass = "text";
	if (thisObj.hasClass("text_calendar")) {
		thisObj.removeClass("text_calendar");
		newClass = "text_calendar";
	} else if (this.tagName == "TEXTAREA") {
		newClass = "text_area";
	} else if (thisObj.hasClass("search")) {
		thisObj.removeClass("search");
		newClass = "text_search";
	}
	newClass += this.disabled ? "_disable" : (this.readOnly ? "_readonly" : "");
	if (thisObj.hasClass("full")) newClass += "_full";
	if (thisObj.hasClass("hidden")) newClass += "_hidden";
	thisObj.addClass(newClass);
}


function irpLoading() {
	showLoading(false, contextPath+"/images/common/loading5.gif", 90, 84);
}

function showLoading(maskBody, image, width, height) {
	var docWidth =$(document).width();
	//var docHeight = document.body.clientHeight;

	//스크롤이 있는 화면이 submit 될경우 clientHeight 보다 커서 화면 일부분이 보여 져서 수정함.
	var clientHeight = document.documentElement.clientHeight;
	var offsetHeight = document.documentElement.offsetHeight;
	var scrollTop = document.documentElement.scrollTop;

	clientHeight = $(document).height() + scrollTop;

	var innerHTML;
	width = width == null ? 100 : width;
	height = height == null ? 100 : height;
	innerHTML = '<img src="' + image + '" />';
	$("body").prepend('<table id="__loading__" style="table-layout:fixed;position:absolute;left:0px;top:0px;z-index:100000;' +
			'width:' + docWidth + 'px;height:' + clientHeight + 'px;' +
			(maskBody?"background-color:white;":"") +
			'"><tr><td style="vertical-align:middle;text-align:center;">' +
			innerHTML + '</td></tr></table>');
	$(window).resize(onLoadingResize);
}

function hideLoading() {
	$(window).unbind("resize", onLoadingResize);
	$("#__loading__").remove();
}

function onLoadingResize(event) {
	var width = document.body.clientWidth;
	if (getInternetExplorerVersion() == 6) {
		width -= document.documentElement.clientWidth-diff;
	}

	$("#__loading__").width(width);
	$("#__loading__").height(document.documentElement.clientHeight);
}

function getInternetExplorerVersion() {
	var rv = -1; // Return value assumes failure.
	if (navigator.appName == 'Microsoft Internet Explorer') {
		var ua = navigator.userAgent;
		var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
		if (re.exec(ua) != null) rv = parseFloat( RegExp.$1 );
	}
	return rv;
}

function _completeAttachmentCallback(response, form) {

	var r = $.trim(response);
	if (r.charAt(0) == '{') {
		var data = eval("(" + r + ")");

		if (data.success) {
			var formParentTable = $("#commonFileTable"+data.downloadType+" UL");
			if (data.fileId != null) {
				formParentTable.append("<div class='attachedFile' fileId='" + data.fileId + "' fileSize='" + data.size + "' newAttachment='true'>" + data.originalName + "</div>");
			} else {
				formParentTable.append("<div class='attachedFile' resourceId='" + data.resourceId + "' fileSize='" + data.size + "' newAttachment='true'>" + data.originalName + "</div>");
			}
			_processAttachedFile.call(formParentTable.children(":last")[0], true);
		} else {
			alert(data.message);
		}
	} else {
		$("BODY").append("<div style='display:none' id='_attachmentMessage'></div>");
		var msgObj = document.getElementById("_attachmentMessage");
		msgObj.innerHTML = r;
		var msg = msgObj.innerText;
		$(msgObj).remove();
		alert(msg);
	}
}

AIM = {

		frame : function(c, f) {

			var n = 'f' + Math.floor(Math.random() * 99999);
			var d = document.createElement('DIV');
			d.innerHTML = '<iframe style="display:none" src="about:blank" id="'+n+'" name="'+n+'" onload="AIM.loaded(\''+n+'\')"></iframe>';
			document.body.appendChild(d);

			var i = document.getElementById(n);
			if (c && typeof(c.onComplete) == 'function') {
				i.onComplete = c.onComplete;
				i.form = f;
			}

			return n;
		},

		form : function(f, name) {
			f.setAttribute('target', name);
		},

		submit : function(f, c, p) {
			irpLoading();
			AIM.form(f, AIM.frame(c, f));
			if (c && typeof(c.onStart) == 'function') {
				return c.onStart();
			} else {
				return true;
			}
		},

		loaded : function(id) {
			var i = document.getElementById(id);
			var d = i.contentWindow.document;
			hideLoading();
			if (d.location.href == "about:blank") return;
			i.form.reset();
			if (typeof(i.onComplete) == 'function') {
				var form = i.form;
				i.form = null;
				i.onComplete(d.body.innerHTML, form);
			}
		}

}

var _attachmentCheck = function(file) {
	// TODO check duplicates in the future
	return true;
}


function _attachedFile() {
	$(".attachedFile").each(_processAttachedFile);
}

function fileSize(size) {
	if (size < 2048) {
		return size+" byte";
	} else if (size < 2048 * 1024) {
		return (size/1024).numberFormat("#,##0.0") + "KB";
	} else {
		return (size/1024/1024).numberFormat("#,##0.0") + "MB";
	}
}

function _processAttachedFile(fireAddEvent) {
	var thisObj = $(this);
	var fileAttachments = thisObj.parents(".fileAttachments");
	var readOnly = fileAttachments.attr("readOnly");
	var fieldName = fileAttachments.attr("fieldName");
	fieldName = fieldName == null ? "attachments" : fieldName;

	readOnly = readOnly == true || readOnly == "true";
	var extraAttributes = fileAttachments.attr("extraAttributes");
	extraAttributes = extraAttributes == null ? [] : extraAttributes.split(",");
	var newHTML = ["<li><label>"];
	newHTML.push(readOnly?"":"<input type='checkbox' class='checkbox fileAttachmentSelector'/>");

	var attachmentId = this.fileId == null ? this.resourceId : this.fileId;
	newHTML.push("<input type='hidden' class='autoIncrement' name='" + fieldName + "[].fileId' value='" + attachmentId + "'/>");
	for (var i = 0; i < extraAttributes.length; i++) {
		var attr = extraAttributes[i];
		newHTML.push("<input type='hidden' class='autoIncrement' name='" + fieldName + "[]." + attr + "' value='" + fileAttachments.attr(attr) + "'/>");
	}
	if (this.objectId != null) {
		newHTML.push("<a ");

		var fileName = this.innerText;
		var lastDotIdx = fileName.indexOf('.');
		var fileExtension = lastDotIdx==-1?"":fileName.substring(lastDotIdx);
		if (fileExtension == ".html" || fileExtension==".htm") {
			newHTML.push("target='_blank' ");
		}

		newHTML.push("href='" + contextPath + "/common/fileDownload.do?downloadType=");
		newHTML.push(this.downloadType + "&id=" + this.objectId + "&fileId=" + this.fileId + "&fileName=" + encodeURIComponent(fileName) + "&_forceDownload=true'>");

	}
	newHTML.push(this.innerHTML);
	if (this.objectId != null) {
		newHTML.push("</a>");
	}
	alert(this.fileSize);
	newHTML.push(" (" + fileSize(this.fileSize) + ")");
	newHTML.push("</label></li>");
	thisObj.html(newHTML.join(""));
	if (fireAddEvent === true) {
		function _onfileadd() {
			var onFileAdd = fileAttachments.attr("onfileadd");
			if (onFileAdd != null) {
				eval(onFileAdd);
			}
		}
		_onfileadd.call(fileAttachments[0]);
	}
}


function processAuthorization(){
	//alert("processAuthorization");
	if (this.className == null || this.className.length == 0) return;
	var hsaAuthorization = false;
	for(var i = 0; i < CURRENT_MENU_AUTHORIZATION.length;i++){
		if(this.className.indexOf(CURRENT_MENU_AUTHORIZATION[i].toLowerCase()) != -1 ){
			hsaAuthorization = true;
		}
	}
	//alert(this.tagName);
	//alert(this.parentNode);
	if(!hsaAuthorization){
		if(this.tagName.toUpperCase() == 'A'){
			var innerHTML = this.innerHTML;
			var parent = this.parentNode;
			parent.innerHTML = innerHTML;
		}
		$(this).remove();
	}

}
function processButtons() {
	if (this.className == null || this.className.length == 0) return;
	var idx = this.className.indexOf(' ');
	var className = idx == -1 ? this.className : this.className.substring(0, idx);
	if (className == null || className.length == 0 || BUTTON_DESIGNS[className] == null) return;

	$(this).after(BUTTON_DESIGNS[className]);
	var next = $(this).next();
	var a = next[0].tagName=='A'?next:next.find("a");
	if (this.href != null) {
		a.attr("href", this.href);
		if (this.target != null) a.attr("target", this.target);
	}
	if (this.innerHTML!=null && this.innerHTML.length > 0) {
		var span='';
		if(a.find('SPAN')[0]!=null){
			span = a.find('SPAN')[0].outerHTML;
			a.html(span+this.innerHTML);
		}else{
			a.text(this.innerHTML);
		}

	}
	//alert(this.innerHTML);
	var onclick = null;
	if (this.onclick != null) {

		if (this.onclick.length > 0) {
			eval("onclick = function () { " + this.onclick + ";}");
		} else if (typeof this.onclick == "function") {
			onclick = this.onclick;
		}
	}

	if (this.type != "submit") {
		a[0].onclick = this.onclick;
	}
	if (this.onclick != null) {
		a[0].originalOnclick = this.onclick;
	}
	if (this.onmousedown != null) a[0].onmousedown = this.onmousedown;
	if (this.onmouseup != null) a[0].onmouseup = this.onmouseup;
	if (this.id != null && this.id.length > 0) next[0].id = this.id;
	if (this.title != null && this.title.length > 0) next[0].title = this.title;
	var parent = $(this).parent();
	next.addClass(this.className);
	if (this.newClass != null) {
		next.addClass(this.newClass);
	}
	if (!parent.hasClass("button") && parent[0].tagName != "TD") {
		next.wrap("<div class='button'></div>");
	}
	//List Button add space
	if(parent.hasClass("button")){
		$(this).after("&nbsp;");
	}
	if (this.type == "submit") {
		var parents = $(this).parents("FORM");
		if (parents.length > 0) {
			a.click(function (event) {
				if (onclick == null || onclick() != false) {
					parents.submit();
				}
			});
		}
	}
	$(this).remove();
}

var dateFormat = function () {
	var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
	timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
	timezoneClip = /[^-+\dA-Z]/g,
	pad = function (val, len) {
		val = String(val);
		len = len || 2;
		while (val.length < len) val = "0" + val;
		return val;
	};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) {
			throw SyntaxError("invalid date");
		}

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var _ = utc ? "getUTC" : "get",
				d = date[_ + "Date"](),
				D = date[_ + "Day"](),
				m = date[_ + "Month"](),
				y = date[_ + "FullYear"](),
				H = date[_ + "Hours"](),
				M = date[_ + "Minutes"](),
				s = date[_ + "Seconds"](),
				L = date[_ + "Milliseconds"](),
				o = utc ? 0 : date.getTimezoneOffset(),
						flags = {
						d:    d,
						dd:   pad(d),
						ddd:  dF.i18n.dayNames[D],
						dddd: dF.i18n.dayNames[D + 7],
						M:    m + 1,
						MM:   pad(m + 1),
						MMM:  dF.i18n.monthNames[m],
						MMMM: dF.i18n.monthNames[m + 12],
						yy:   String(y).slice(2),
						yyyy: y,
						h:    H % 12 || 12,
						hh:   pad(H % 12 || 12),
						H:    H,
						HH:   pad(H),
						m:    M,
						mm:   pad(M),
						s:    s,
						ss:   pad(s),
						SSS:    pad(L, 3),
						S:    pad(L > 99 ? Math.round(L / 10) : L),
						a:    H < 12 ? "A"  : "P",
								T:   date.getTime(),
								Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
										o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
										S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
				};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();

dateFormat.masks = {
		"default":      "ddd MMM dd yyyy HH:mm:ss",
		shortDate:      "M/d/yy",
		mediumDate:     "MMM d, yyyy",
		longDate:       "MMMM d, yyyy",
		fullDate:       "dddd, MMMM d, yyyy",
		shortTime:      "h:mm TT",
		mediumTime:     "h:mm:ss TT",
		longTime:       "h:mm:ss TT Z",
		isoDate:        "yyyy-MM-dd",
		isoTime:        "HH:mm:ss",
		isoDateTime:    "yyyy-MM-dd'T'HH:mm:ss",
		isoUtcDateTime: "UTC:yyyy-MM-dd'T'HH:mm:ss'Z'",
		date:           "yyyy-MM-dd",
		timestamp:      "yyyy-MM-dd'T'HH:mm",
		datetime:       "yyyy-MM-dd'T'HH:mm",
		timestamp2:     "yyyy-MM-dd'T'HH:mm:ss",
		datetime2:      "yyyy-MM-dd'T'HH:mm:ss",
		time:           "HH:mm",
		time2:          "HH:mm:ss"
};

//Internationalization strings
dateFormat.i18n = {
		dayNames: [
		           "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		           "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
		           ],
		           monthNames: [
		                        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		                        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
		                        ]
};

function generateFileInfo(){
	var attachDiv = $(".fileAttachments");
	for(var k=0 ; k < attachDiv.length ; k++){
		var fieldName = attachDiv[k].fieldName == null ? "attachments" : attachDiv[k].fieldName;
		var fileInfos = $(":input[name='"+fieldName+"[].fileId']:not(:disabled)");
		for(var i = 0 ; i < fileInfos.length; i++){
			var fileInfo = fileInfos[i];
			fileInfo.name = fileInfo.name.replace("[]", "[" + i + "]");
		}
	}
}

function swfGenerateFileInfo(){

	var attachDivs = $(".uploadifyQueue");
	for(var i = 0 ; i < attachDivs.length ; i++){
		var attachDiv = attachDivs[i];
		var fieldName = $(attachDiv).attr('fieldName');
		var fileInfos = $(":input[name='"+fieldName+"[].fileId']:not(:disabled)");
		for(var k = 0 ; k < fileInfos.length; k++){
			var fileInfo = fileInfos[k];
			fileInfo.name = fileInfo.name.replace("[]", "[" + k + "]");
		}
	}
}

function onFaile(res){
	try{
		var ret = eval("("+res.responseText+")");
		alert(ret.message);
	}catch(e){
		alert(e.description);
	}
}

function retStrongText(txt){
	return "<strong>"+txt+"</strong>";
}